# GPT-4o Research Agent in LangGraph

This Jupyter notebook demonstrates the implementation of an AI research agent using `gpt-4o`, Pinecone, LangGraph, arXiv, and Tavily for web searches. The agent is designed to perform comprehensive research on topics like Artificial Intelligence (AI) and Retrieval-Augmented Generation (RAG) by leveraging multiple tools.

## Features
- **ArXiv Paper Fetch**: Retrieves abstracts of papers from arXiv given a paper ID.
- **Web Search**: Conducts general-purpose web searches using Tavily.
- **RAG Search**: Queries a Pinecone-based knowledge base built from AI arXiv papers.
- **RAG Search with Filter**: Retrieves specific information from papers in the knowledge base.
- **Final Answer Tool**: Formats the agent's output into a structured report with sections for introduction, research steps, main body, conclusion, and sources.

## Prerequisites
To run this notebook, you need the following:
- **Python**: Version 3.10 or higher.
- **API Keys**:
  - OpenAI API key for embeddings and language model access.
  - Pinecone API key for vector database operations.
  - Tavily API key for web searches.
- **System Dependencies**:
  - `graphviz`, `libgraphviz-dev`, and `pkg-config` for graph visualization.
- **Python Libraries**:
  - Install required packages using the command below:
    ```bash
    pip install -qU \
        datasets==2.19.1 \
        langchain-pinecone==0.1.1 \
        langchain-openai==0.1.9 \
        langchain==0.2.5 \
        langchain-core==0.2.9 \
        langgraph==0.1.1 \
        semantic-router==0.0.48 \
        tavily-python==0.5.0 \
        pygraphviz==1.12
    ```

## Setup
1. **Install System Dependencies**:
   ```bash
   apt-get install graphviz libgraphviz-dev pkg-config
   ```

2. **Set Up Environment Variables**:
   - Ensure your OpenAI, Pinecone, and Tavily API keys are set as environment variables or input them when prompted by the notebook. For Tavily, set the `TAVILY_API_KEY` environment variable.

3. **Knowledge Base Creation**:
   - The notebook uses the `jamescalam/ai-arxiv2-semantic-chunks` dataset from Hugging Face to build a Pinecone index.
   - The dataset is embedded using OpenAI's `text-embedding-3-small` model and upserted into a Pinecone index named `gpt-4o-research-agent`.

## Usage
1. **Run the Notebook**:
   - Open the `res_agent.ipynb` file in Jupyter Notebook or JupyterLab.
   - Execute the cells sequentially to set up the environment, build the knowledge base, and define the agent.

2. **Query the Agent**:
   - The notebook includes examples of querying the agent about:
     - General AI concepts (`"tell me about AI* **Web Search Tool**: Modified to use Tavily instead of SerpAPI for general-purpose web searches.
   - The agent will perform searches, retrieve relevant information, and generate a structured report.

3. **View Outputs**:
   - Outputs are displayed as formatted reports with sections for introduction, research steps, main body, conclusion, and sources.
   - Example reports are included for AI and RAG queries.

## Notes
- **Graph Visualization**: The notebook uses `pygraphviz` to visualize the LangGraph structure. This is optional and not required for the agent's functionality.
- **Pinecone Index**: If you skip the knowledge base setup, replace the RAG search tool with a placeholder to test the agent's structure without RAG functionality.
- **Rate Limits**: Be aware of API rate limits for OpenAI, Pinecone, and Tavily when running the notebook extensively.
- **Tavily Integration**: The web search tool has been updated to use the `tavily-python` library. Ensure the Tavily API key is correctly configured.

## Example Output
For the query `"what is retrieval augmented generation?"`, the agent produces a report like:
```
INTRODUCTION
------------
Retrieval-Augmented Generation (RAG) is an advanced technique in the field of artificial intelligence that aims to enhance the performance of generative models by incorporating external information...

RESEARCH STEPS
--------------
1. Conducted a specialized search using the RAG search tool...
2. Performed a web search using Tavily to collect general knowledge...
3. Compiled and synthesized the information...

REPORT
------
Retrieval-Augmented Generation (RAG) is a framework designed to improve the quality of responses generated by large language models...

CONCLUSION
----------
Retrieval-Augmented Generation represents a significant advancement in the field of AI...

SOURCES
-------
- AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation, ArXiv ID: 2308.08155
- SimplyRetrieve: A Private and Lightweight Retrieval-Centric Generative AI Tool, ArXiv ID: 2308.03983
- Tavily Search Results
...
```

## License
This project is licensed under the MIT License. See the `LICENSE` file for details.

## Acknowledgments
- Built with [LangGraph](https://github.com/langchain-ai/langgraph), [Pinecone](https://www.pinecone.io/), and [Tavily](https://tavily.com/).
- Uses the `jamescalam/ai-arxiv2-semantic-chunks` dataset from [Hugging Face](https://huggingface.co/datasets/jamescalam/ai-arxiv2-semantic-chunks).